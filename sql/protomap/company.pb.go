// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: sql/protomap/company.proto

package protomap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Branch    string      `protobuf:"bytes,3,opt,name=Branch,proto3" json:"Branch,omitempty"`
	Url       string      `protobuf:"bytes,4,opt,name=Url,proto3" json:"Url,omitempty"`
	Founded   string      `protobuf:"bytes,5,opt,name=Founded,proto3" json:"Founded,omitempty"`
	Employees []*Employee `protobuf:"bytes,6,rep,name=Employees,proto3" json:"Employees,omitempty"`
	Products  []*Product  `protobuf:"bytes,7,rep,name=Products,proto3" json:"Products,omitempty"`
	Debitors  []*Contract `protobuf:"bytes,8,rep,name=Debitors,proto3" json:"Debitors,omitempty"`
	Creditors []*Contract `protobuf:"bytes,9,rep,name=Creditors,proto3" json:"Creditors,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_protomap_company_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_sql_protomap_company_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_sql_protomap_company_proto_rawDescGZIP(), []int{0}
}

func (x *Company) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Company) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Company) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Company) GetFounded() string {
	if x != nil {
		return x.Founded
	}
	return ""
}

func (x *Company) GetEmployees() []*Employee {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *Company) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *Company) GetDebitors() []*Contract {
	if x != nil {
		return x.Debitors
	}
	return nil
}

func (x *Company) GetCreditors() []*Contract {
	if x != nil {
		return x.Creditors
	}
	return nil
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// string CreditorId = 2 [(sqlgen.dbcol) = "creditor_id"];
	Creditor *Company `protobuf:"bytes,2,opt,name=Creditor,proto3" json:"Creditor,omitempty"`
	Debitor  *Company `protobuf:"bytes,3,opt,name=Debitor,proto3" json:"Debitor,omitempty"`
	Amount   float32  `protobuf:"fixed32,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_protomap_company_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_sql_protomap_company_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_sql_protomap_company_proto_rawDescGZIP(), []int{1}
}

func (x *Contract) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contract) GetCreditor() *Company {
	if x != nil {
		return x.Creditor
	}
	return nil
}

func (x *Contract) GetDebitor() *Company {
	if x != nil {
		return x.Debitor
	}
	return nil
}

func (x *Contract) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type Employee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Company *Company `protobuf:"bytes,2,opt,name=Company,proto3" json:"Company,omitempty"`
	// Company Company = 2 [(sqlgen.dbcol) = "company_id", (sqlgen.dbfk) = "company.id"];
	// string Company = 2 [(sqlgen.dbcol) = "company_id", (sqlgen.dbfk) = "company.id"];
	Firstname string `protobuf:"bytes,3,opt,name=Firstname,proto3" json:"Firstname,omitempty"`
	Lastname  string `protobuf:"bytes,4,opt,name=Lastname,proto3" json:"Lastname,omitempty"`
	Email     string `protobuf:"bytes,5,opt,name=Email,proto3" json:"Email,omitempty"`
	Birthdate string `protobuf:"bytes,6,opt,name=Birthdate,proto3" json:"Birthdate,omitempty"`
}

func (x *Employee) Reset() {
	*x = Employee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_protomap_company_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Employee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employee) ProtoMessage() {}

func (x *Employee) ProtoReflect() protoreflect.Message {
	mi := &file_sql_protomap_company_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employee.ProtoReflect.Descriptor instead.
func (*Employee) Descriptor() ([]byte, []int) {
	return file_sql_protomap_company_proto_rawDescGZIP(), []int{2}
}

func (x *Employee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Employee) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *Employee) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *Employee) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *Employee) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Employee) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Company *Company `protobuf:"bytes,2,opt,name=Company,proto3" json:"Company,omitempty"`
	// string Company = 2 [(sqlgen.col) = "company_id", (sqlgen.dbfk) = "company.id"];
	Name         string  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	ProdType     string  `protobuf:"bytes,4,opt,name=ProdType,proto3" json:"ProdType,omitempty"`
	Manufactured int64   `protobuf:"varint,5,opt,name=Manufactured,proto3" json:"Manufactured,omitempty"`
	Sold         int64   `protobuf:"varint,6,opt,name=Sold,proto3" json:"Sold,omitempty"`
	Price        float32 `protobuf:"fixed32,7,opt,name=Price,proto3" json:"Price,omitempty"`
	Released     string  `protobuf:"bytes,8,opt,name=Released,proto3" json:"Released,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_protomap_company_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_sql_protomap_company_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_sql_protomap_company_proto_rawDescGZIP(), []int{3}
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetProdType() string {
	if x != nil {
		return x.ProdType
	}
	return ""
}

func (x *Product) GetManufactured() int64 {
	if x != nil {
		return x.Manufactured
	}
	return 0
}

func (x *Product) GetSold() int64 {
	if x != nil {
		return x.Sold
	}
	return 0
}

func (x *Product) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetReleased() string {
	if x != nil {
		return x.Released
	}
	return ""
}

var File_sql_protomap_company_proto protoreflect.FileDescriptor

var file_sql_protomap_company_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x61, 0x70, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x71, 0x6c,
	0x67, 0x65, 0x6e, 0x2f, 0x73, 0x71, 0x6c, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x87, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1b, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xf2, 0xd6, 0x86, 0x03, 0x06, 0x0a,
	0x02, 0x69, 0x64, 0x10, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xf2, 0xd6, 0x86, 0x03, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xf2, 0xd6, 0x86, 0x03,
	0x08, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xf2, 0xd6, 0x86, 0x03, 0x05, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12,
	0x28, 0x0a, 0x07, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xf2, 0xd6, 0x86, 0x03, 0x09, 0x0a, 0x07, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x52, 0x07, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42,
	0x1e, 0xf2, 0xd6, 0x86, 0x03, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x1a, 0x13, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x52,
	0x09, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x1d,
	0xf2, 0xd6, 0x86, 0x03, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x1e, 0xf2, 0xd6,
	0x86, 0x03, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x1a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x08, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x1f, 0xf2, 0xd6,
	0x86, 0x03, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x1a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x10, 0xa2, 0xd6, 0x86, 0x03, 0x0b, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10, 0x01, 0x22, 0xfa, 0x01, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xf2, 0xd6, 0x86, 0x03, 0x06, 0x0a, 0x02, 0x69, 0x64, 0x10, 0x01,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x1e, 0xf2, 0xd6, 0x86, 0x03, 0x19, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x1a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x44, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x1d, 0xf2, 0xd6, 0x86, 0x03, 0x18, 0x0a, 0x0a, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x1a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x69, 0x64, 0x52, 0x07, 0x44, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0d, 0xf2,
	0xd6, 0x86, 0x03, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x11, 0xa2, 0xd6, 0x86, 0x03, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x01, 0x22, 0xb6, 0x02, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xf2, 0xd6, 0x86, 0x03, 0x06, 0x0a, 0x02, 0x69, 0x64, 0x10, 0x01, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x42, 0x1d, 0xf2, 0xd6, 0x86, 0x03, 0x18, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x1a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x69, 0x64, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2e, 0x0a, 0x09,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xf2, 0xd6, 0x86, 0x03, 0x0b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xf2, 0xd6, 0x86, 0x03, 0x0a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xf2, 0xd6, 0x86, 0x03, 0x07, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a,
	0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xf2, 0xd6, 0x86, 0x03, 0x0b, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x11, 0xa2,
	0xd6, 0x86, 0x03, 0x0c, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x10, 0x01,
	0x22, 0xfd, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xf2, 0xd6, 0x86, 0x03, 0x06, 0x0a,
	0x02, 0x69, 0x64, 0x10, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x1d, 0xf2, 0xd6,
	0x86, 0x03, 0x18, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x1a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x69, 0x64, 0x52, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xf2, 0xd6, 0x86, 0x03, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xf2, 0xd6, 0x86, 0x03, 0x0b, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x13, 0xf2, 0xd6, 0x86, 0x03, 0x0e,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x0c,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x04,
	0x53, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xf2, 0xd6, 0x86, 0x03,
	0x06, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x52, 0x04, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0c, 0xf2, 0xd6,
	0x86, 0x03, 0x07, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xd6, 0x86, 0x03, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x52, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x3a, 0x10,
	0xa2, 0xd6, 0x86, 0x03, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x01,
	0x42, 0x8f, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x42, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6f, 0x64,
	0x65, 0x72, 0x6d, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2f, 0x73,
	0x71, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x61, 0x70, 0x2f, 0x73, 0x71, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x61, 0x70, 0xa2, 0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02,
	0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0xca, 0x02, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0xe2, 0x02, 0x13, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sql_protomap_company_proto_rawDescOnce sync.Once
	file_sql_protomap_company_proto_rawDescData = file_sql_protomap_company_proto_rawDesc
)

func file_sql_protomap_company_proto_rawDescGZIP() []byte {
	file_sql_protomap_company_proto_rawDescOnce.Do(func() {
		file_sql_protomap_company_proto_rawDescData = protoimpl.X.CompressGZIP(file_sql_protomap_company_proto_rawDescData)
	})
	return file_sql_protomap_company_proto_rawDescData
}

var file_sql_protomap_company_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sql_protomap_company_proto_goTypes = []interface{}{
	(*Company)(nil),  // 0: example.Company
	(*Contract)(nil), // 1: example.Contract
	(*Employee)(nil), // 2: example.Employee
	(*Product)(nil),  // 3: example.Product
}
var file_sql_protomap_company_proto_depIdxs = []int32{
	2, // 0: example.Company.Employees:type_name -> example.Employee
	3, // 1: example.Company.Products:type_name -> example.Product
	1, // 2: example.Company.Debitors:type_name -> example.Contract
	1, // 3: example.Company.Creditors:type_name -> example.Contract
	0, // 4: example.Contract.Creditor:type_name -> example.Company
	0, // 5: example.Contract.Debitor:type_name -> example.Company
	0, // 6: example.Employee.Company:type_name -> example.Company
	0, // 7: example.Product.Company:type_name -> example.Company
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sql_protomap_company_proto_init() }
func file_sql_protomap_company_proto_init() {
	if File_sql_protomap_company_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sql_protomap_company_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_protomap_company_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_protomap_company_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Employee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_protomap_company_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sql_protomap_company_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sql_protomap_company_proto_goTypes,
		DependencyIndexes: file_sql_protomap_company_proto_depIdxs,
		MessageInfos:      file_sql_protomap_company_proto_msgTypes,
	}.Build()
	File_sql_protomap_company_proto = out.File
	file_sql_protomap_company_proto_rawDesc = nil
	file_sql_protomap_company_proto_goTypes = nil
	file_sql_protomap_company_proto_depIdxs = nil
}
