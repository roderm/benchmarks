// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Companies", testCompanies)
	t.Run("Employees", testEmployees)
	t.Run("Products", testProducts)
}

func TestDelete(t *testing.T) {
	t.Run("Companies", testCompaniesDelete)
	t.Run("Employees", testEmployeesDelete)
	t.Run("Products", testProductsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Companies", testCompaniesQueryDeleteAll)
	t.Run("Employees", testEmployeesQueryDeleteAll)
	t.Run("Products", testProductsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Companies", testCompaniesSliceDeleteAll)
	t.Run("Employees", testEmployeesSliceDeleteAll)
	t.Run("Products", testProductsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Companies", testCompaniesExists)
	t.Run("Employees", testEmployeesExists)
	t.Run("Products", testProductsExists)
}

func TestFind(t *testing.T) {
	t.Run("Companies", testCompaniesFind)
	t.Run("Employees", testEmployeesFind)
	t.Run("Products", testProductsFind)
}

func TestBind(t *testing.T) {
	t.Run("Companies", testCompaniesBind)
	t.Run("Employees", testEmployeesBind)
	t.Run("Products", testProductsBind)
}

func TestOne(t *testing.T) {
	t.Run("Companies", testCompaniesOne)
	t.Run("Employees", testEmployeesOne)
	t.Run("Products", testProductsOne)
}

func TestAll(t *testing.T) {
	t.Run("Companies", testCompaniesAll)
	t.Run("Employees", testEmployeesAll)
	t.Run("Products", testProductsAll)
}

func TestCount(t *testing.T) {
	t.Run("Companies", testCompaniesCount)
	t.Run("Employees", testEmployeesCount)
	t.Run("Products", testProductsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Companies", testCompaniesHooks)
	t.Run("Employees", testEmployeesHooks)
	t.Run("Products", testProductsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Companies", testCompaniesInsert)
	t.Run("Companies", testCompaniesInsertWhitelist)
	t.Run("Employees", testEmployeesInsert)
	t.Run("Employees", testEmployeesInsertWhitelist)
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("EmployeeToCompanyUsingCompany", testEmployeeToOneCompanyUsingCompany)
	t.Run("ProductToCompanyUsingCompany", testProductToOneCompanyUsingCompany)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CompanyToEmployees", testCompanyToManyEmployees)
	t.Run("CompanyToProducts", testCompanyToManyProducts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("EmployeeToCompanyUsingEmployees", testEmployeeToOneSetOpCompanyUsingCompany)
	t.Run("ProductToCompanyUsingProducts", testProductToOneSetOpCompanyUsingCompany)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CompanyToEmployees", testCompanyToManyAddOpEmployees)
	t.Run("CompanyToProducts", testCompanyToManyAddOpProducts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Companies", testCompaniesReload)
	t.Run("Employees", testEmployeesReload)
	t.Run("Products", testProductsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Companies", testCompaniesReloadAll)
	t.Run("Employees", testEmployeesReloadAll)
	t.Run("Products", testProductsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Companies", testCompaniesSelect)
	t.Run("Employees", testEmployeesSelect)
	t.Run("Products", testProductsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Companies", testCompaniesUpdate)
	t.Run("Employees", testEmployeesUpdate)
	t.Run("Products", testProductsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Companies", testCompaniesSliceUpdateAll)
	t.Run("Employees", testEmployeesSliceUpdateAll)
	t.Run("Products", testProductsSliceUpdateAll)
}
