// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Employee is an object representing the database table.
type Employee struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID string      `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	Firstname null.String `boil:"firstname" json:"firstname,omitempty" toml:"firstname" yaml:"firstname,omitempty"`
	Lastname  null.String `boil:"lastname" json:"lastname,omitempty" toml:"lastname" yaml:"lastname,omitempty"`
	Email     null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Birthdate null.Time   `boil:"birthdate" json:"birthdate,omitempty" toml:"birthdate" yaml:"birthdate,omitempty"`

	R *employeeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L employeeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmployeeColumns = struct {
	ID        string
	CompanyID string
	Firstname string
	Lastname  string
	Email     string
	Birthdate string
}{
	ID:        "id",
	CompanyID: "company_id",
	Firstname: "firstname",
	Lastname:  "lastname",
	Email:     "email",
	Birthdate: "birthdate",
}

var EmployeeTableColumns = struct {
	ID        string
	CompanyID string
	Firstname string
	Lastname  string
	Email     string
	Birthdate string
}{
	ID:        "employee.id",
	CompanyID: "employee.company_id",
	Firstname: "employee.firstname",
	Lastname:  "employee.lastname",
	Email:     "employee.email",
	Birthdate: "employee.birthdate",
}

// Generated where

var EmployeeWhere = struct {
	ID        whereHelperstring
	CompanyID whereHelperstring
	Firstname whereHelpernull_String
	Lastname  whereHelpernull_String
	Email     whereHelpernull_String
	Birthdate whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"employee\".\"id\""},
	CompanyID: whereHelperstring{field: "\"employee\".\"company_id\""},
	Firstname: whereHelpernull_String{field: "\"employee\".\"firstname\""},
	Lastname:  whereHelpernull_String{field: "\"employee\".\"lastname\""},
	Email:     whereHelpernull_String{field: "\"employee\".\"email\""},
	Birthdate: whereHelpernull_Time{field: "\"employee\".\"birthdate\""},
}

// EmployeeRels is where relationship names are stored.
var EmployeeRels = struct {
	Company string
}{
	Company: "Company",
}

// employeeR is where relationships are stored.
type employeeR struct {
	Company *Company `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
}

// NewStruct creates a new relationship struct
func (*employeeR) NewStruct() *employeeR {
	return &employeeR{}
}

// employeeL is where Load methods for each relationship are stored.
type employeeL struct{}

var (
	employeeAllColumns            = []string{"id", "company_id", "firstname", "lastname", "email", "birthdate"}
	employeeColumnsWithoutDefault = []string{"company_id", "firstname", "lastname", "email", "birthdate"}
	employeeColumnsWithDefault    = []string{"id"}
	employeePrimaryKeyColumns     = []string{"id"}
)

type (
	// EmployeeSlice is an alias for a slice of pointers to Employee.
	// This should almost always be used instead of []Employee.
	EmployeeSlice []*Employee
	// EmployeeHook is the signature for custom Employee hook methods
	EmployeeHook func(context.Context, boil.ContextExecutor, *Employee) error

	employeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	employeeType                 = reflect.TypeOf(&Employee{})
	employeeMapping              = queries.MakeStructMapping(employeeType)
	employeePrimaryKeyMapping, _ = queries.BindMapping(employeeType, employeeMapping, employeePrimaryKeyColumns)
	employeeInsertCacheMut       sync.RWMutex
	employeeInsertCache          = make(map[string]insertCache)
	employeeUpdateCacheMut       sync.RWMutex
	employeeUpdateCache          = make(map[string]updateCache)
	employeeUpsertCacheMut       sync.RWMutex
	employeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var employeeBeforeInsertHooks []EmployeeHook
var employeeBeforeUpdateHooks []EmployeeHook
var employeeBeforeDeleteHooks []EmployeeHook
var employeeBeforeUpsertHooks []EmployeeHook

var employeeAfterInsertHooks []EmployeeHook
var employeeAfterSelectHooks []EmployeeHook
var employeeAfterUpdateHooks []EmployeeHook
var employeeAfterDeleteHooks []EmployeeHook
var employeeAfterUpsertHooks []EmployeeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Employee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Employee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Employee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Employee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Employee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Employee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Employee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Employee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Employee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmployeeHook registers your hook function for all future operations.
func AddEmployeeHook(hookPoint boil.HookPoint, employeeHook EmployeeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		employeeBeforeInsertHooks = append(employeeBeforeInsertHooks, employeeHook)
	case boil.BeforeUpdateHook:
		employeeBeforeUpdateHooks = append(employeeBeforeUpdateHooks, employeeHook)
	case boil.BeforeDeleteHook:
		employeeBeforeDeleteHooks = append(employeeBeforeDeleteHooks, employeeHook)
	case boil.BeforeUpsertHook:
		employeeBeforeUpsertHooks = append(employeeBeforeUpsertHooks, employeeHook)
	case boil.AfterInsertHook:
		employeeAfterInsertHooks = append(employeeAfterInsertHooks, employeeHook)
	case boil.AfterSelectHook:
		employeeAfterSelectHooks = append(employeeAfterSelectHooks, employeeHook)
	case boil.AfterUpdateHook:
		employeeAfterUpdateHooks = append(employeeAfterUpdateHooks, employeeHook)
	case boil.AfterDeleteHook:
		employeeAfterDeleteHooks = append(employeeAfterDeleteHooks, employeeHook)
	case boil.AfterUpsertHook:
		employeeAfterUpsertHooks = append(employeeAfterUpsertHooks, employeeHook)
	}
}

// One returns a single employee record from the query.
func (q employeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Employee, error) {
	o := &Employee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for employee")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Employee records from the query.
func (q employeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmployeeSlice, error) {
	var o []*Employee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Employee slice")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Employee records in the query.
func (q employeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count employee rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q employeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if employee exists")
	}

	return count > 0, nil
}

// Company pointed to by the foreign key.
func (o *Employee) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	query := Companies(queryMods...)
	queries.SetFrom(query.Query, "\"company\"")

	return query
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (employeeL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.CompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if a == obj.CompanyID {
					continue Outer
				}
			}

			args = append(args, obj.CompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`company`),
		qm.WhereIn(`company.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for company")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.Employees = append(foreign.R.Employees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyID == foreign.ID {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Employees = append(foreign.R.Employees, local)
				break
			}
		}
	}

	return nil
}

// SetCompany of the employee to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Employees.
func (o *Employee) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"employee\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 2, employeePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyID = related.ID
	if o.R == nil {
		o.R = &employeeR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			Employees: EmployeeSlice{o},
		}
	} else {
		related.R.Employees = append(related.R.Employees, o)
	}

	return nil
}

// Employees retrieves all the records using an executor.
func Employees(mods ...qm.QueryMod) employeeQuery {
	mods = append(mods, qm.From("\"employee\""))
	return employeeQuery{NewQuery(mods...)}
}

// FindEmployee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmployee(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Employee, error) {
	employeeObj := &Employee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"employee\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, employeeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from employee")
	}

	if err = employeeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return employeeObj, err
	}

	return employeeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Employee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employee provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	employeeInsertCacheMut.RLock()
	cache, cached := employeeInsertCache[key]
	employeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"employee\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"employee\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into employee")
	}

	if !cached {
		employeeInsertCacheMut.Lock()
		employeeInsertCache[key] = cache
		employeeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Employee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Employee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	employeeUpdateCacheMut.RLock()
	cache, cached := employeeUpdateCache[key]
	employeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update employee, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"employee\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, employeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, append(wl, employeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update employee row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for employee")
	}

	if !cached {
		employeeUpdateCacheMut.Lock()
		employeeUpdateCache[key] = cache
		employeeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q employeeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for employee")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmployeeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"employee\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, employeePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all employee")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Employee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employee provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	employeeUpsertCacheMut.RLock()
	cache, cached := employeeUpsertCache[key]
	employeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert employee, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(employeePrimaryKeyColumns))
			copy(conflict, employeePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"employee\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert employee")
	}

	if !cached {
		employeeUpsertCacheMut.Lock()
		employeeUpsertCache[key] = cache
		employeeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Employee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Employee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Employee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), employeePrimaryKeyMapping)
	sql := "DELETE FROM \"employee\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for employee")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q employeeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no employeeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employee")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmployeeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(employeeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"employee\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, employeePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employee")
	}

	if len(employeeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Employee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmployee(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployeeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmployeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"employee\".* FROM \"employee\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, employeePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmployeeSlice")
	}

	*o = slice

	return nil
}

// EmployeeExists checks if the Employee row exists.
func EmployeeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"employee\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if employee exists")
	}

	return exists, nil
}
