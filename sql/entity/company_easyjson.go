// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4b608a57DecodeGithubComRodermBenchmarksSqlEntity(in *jlexer.Lexer, out *Company) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Branch":
			out.Branch = string(in.String())
		case "Url":
			out.Url = string(in.String())
		case "Founded":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Founded).UnmarshalJSON(data))
			}
		case "Employees":
			if in.IsNull() {
				in.Skip()
				out.Employees = nil
			} else {
				in.Delim('[')
				if out.Employees == nil {
					if !in.IsDelim(']') {
						out.Employees = make([]*Employee, 0, 8)
					} else {
						out.Employees = []*Employee{}
					}
				} else {
					out.Employees = (out.Employees)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Employee
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Employee)
						}
						easyjson4b608a57DecodeGithubComRodermBenchmarksSqlEntity1(in, v1)
					}
					out.Employees = append(out.Employees, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]*Product, 0, 8)
					} else {
						out.Products = []*Product{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *Product
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Product)
						}
						easyjson4b608a57DecodeGithubComRodermBenchmarksSqlEntity2(in, v2)
					}
					out.Products = append(out.Products, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b608a57EncodeGithubComRodermBenchmarksSqlEntity(out *jwriter.Writer, in Company) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Branch\":"
		out.RawString(prefix)
		out.String(string(in.Branch))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"Founded\":"
		out.RawString(prefix)
		out.Raw((in.Founded).MarshalJSON())
	}
	{
		const prefix string = ",\"Employees\":"
		out.RawString(prefix)
		if in.Employees == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Employees {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjson4b608a57EncodeGithubComRodermBenchmarksSqlEntity1(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Products\":"
		out.RawString(prefix)
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Products {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson4b608a57EncodeGithubComRodermBenchmarksSqlEntity2(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Company) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4b608a57EncodeGithubComRodermBenchmarksSqlEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Company) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4b608a57EncodeGithubComRodermBenchmarksSqlEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Company) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4b608a57DecodeGithubComRodermBenchmarksSqlEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Company) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4b608a57DecodeGithubComRodermBenchmarksSqlEntity(l, v)
}
func easyjson4b608a57DecodeGithubComRodermBenchmarksSqlEntity2(in *jlexer.Lexer, out *Product) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "ProdType":
			out.ProdType = string(in.String())
		case "Manufactured":
			out.Manufactured = int(in.Int())
		case "Sold":
			out.Sold = int(in.Int())
		case "Price":
			out.Price = float32(in.Float32())
		case "Released":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Released).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b608a57EncodeGithubComRodermBenchmarksSqlEntity2(out *jwriter.Writer, in Product) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"ProdType\":"
		out.RawString(prefix)
		out.String(string(in.ProdType))
	}
	{
		const prefix string = ",\"Manufactured\":"
		out.RawString(prefix)
		out.Int(int(in.Manufactured))
	}
	{
		const prefix string = ",\"Sold\":"
		out.RawString(prefix)
		out.Int(int(in.Sold))
	}
	{
		const prefix string = ",\"Price\":"
		out.RawString(prefix)
		out.Float32(float32(in.Price))
	}
	{
		const prefix string = ",\"Released\":"
		out.RawString(prefix)
		out.Raw((in.Released).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson4b608a57DecodeGithubComRodermBenchmarksSqlEntity1(in *jlexer.Lexer, out *Employee) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "Firstname":
			out.Firstname = string(in.String())
		case "Lastname":
			out.Lastname = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Birthdate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthdate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b608a57EncodeGithubComRodermBenchmarksSqlEntity1(out *jwriter.Writer, in Employee) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Firstname\":"
		out.RawString(prefix)
		out.String(string(in.Firstname))
	}
	{
		const prefix string = ",\"Lastname\":"
		out.RawString(prefix)
		out.String(string(in.Lastname))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Birthdate\":"
		out.RawString(prefix)
		out.Raw((in.Birthdate).MarshalJSON())
	}
	out.RawByte('}')
}
